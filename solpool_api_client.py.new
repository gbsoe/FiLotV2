#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
SolPool Insight API Client
Connects to SolPool Insight API for real-time liquidity pool data
"""

import os
import time
import json
import logging
import requests
from typing import Dict, List, Any, Optional, Union

# Configure logging
logging.basicConfig(
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# SolPool API configuration
SOLPOOL_API_URL = os.environ.get("SOLPOOL_API_URL", "https://filotanalytics.replit.app/API")
SOLPOOL_API_KEY = os.environ.get("SOLPOOL_API_KEY")

# Cache configuration
CACHE_EXPIRY = 300  # 5 minutes cache for pool data
RATE_LIMIT_PERIOD = 10  # 10 seconds between API calls

# Cache storage
_cache = {}
_last_call_timestamp = {}

def _is_cache_valid(cache_key: str) -> bool:
    """
    Check if cached data is still valid
    
    Args:
        cache_key: Cache key to check
        
    Returns:
        True if cache is valid, False otherwise
    """
    if cache_key not in _cache:
        return False
        
    cache_entry = _cache[cache_key]
    
    # Check if cache has expired
    if "timestamp" not in cache_entry:
        return False
        
    current_time = time.time()
    return current_time - cache_entry["timestamp"] < CACHE_EXPIRY

def _can_make_api_call(endpoint: str) -> bool:
    """
    Check if we can make an API call based on rate limiting
    
    Args:
        endpoint: API endpoint to check
        
    Returns:
        True if API call allowed, False otherwise
    """
    if endpoint not in _last_call_timestamp:
        return True
        
    current_time = time.time()
    return current_time - _last_call_timestamp[endpoint] >= RATE_LIMIT_PERIOD

def _save_to_cache(cache_key: str, data: Dict[str, Any]) -> None:
    """
    Save data to cache
    
    Args:
        cache_key: Cache key to use
        data: Data to cache
    """
    _cache[cache_key] = {
        "data": data,
        "timestamp": time.time()
    }

def _update_api_call_timestamp(endpoint: str) -> None:
    """
    Update timestamp of last API call
    
    Args:
        endpoint: API endpoint that was called
    """
    _last_call_timestamp[endpoint] = time.time()

def api_health_check() -> bool:
    """
    Check if the SolPool API is accessible
    
    Returns:
        True if API is accessible, False otherwise
    """
    try:
        # Try to get the API health endpoint
        health_cache_key = "health_check"
        
        if _is_cache_valid(health_cache_key):
            # Return cached health status
            return _cache[health_cache_key]["data"].get("status") == "success"
        
        if not _can_make_api_call("health"):
            # Rate limited, assume API is healthy if we've successfully connected before
            return health_cache_key in _cache and _cache[health_cache_key]["data"].get("status") == "success"
            
        # Make API call
        url = f"{SOLPOOL_API_URL}/health"
        
        # Use API key if available
        headers = {}
        if SOLPOOL_API_KEY:
            headers["X-API-Key"] = SOLPOOL_API_KEY
            
        response = requests.get(url, headers=headers, timeout=5)
        
        # Update call timestamp
        _update_api_call_timestamp("health")
        
        if response.status_code == 200:
            result = response.json()
            _save_to_cache(health_cache_key, result)
            return result.get("status") == "success"
            
        return False
    except Exception as e:
        logger.error(f"Error checking API health: {e}")
        return False

def get_pools(filters: Optional[Dict[str, Any]] = None) -> List[Dict[str, Any]]:
    """
    Get list of all pools with optional filtering
    
    Args:
        filters: Dictionary of filter parameters
            - dex: Filter by DEX name
            - category: Filter by pool category
            - min_tvl: Minimum TVL threshold
            - max_tvl: Maximum TVL threshold
            - min_apr: Minimum APR threshold
            - max_apr: Maximum APR threshold
            - min_volume: Minimum 24h volume
            - token: Filter pools containing this token
            - limit: Maximum number of results
            - offset: Number of results to skip
            - sort_by: Field to sort by
            - sort_dir: Sort direction ('asc' or 'desc')
            - min_prediction: Minimum prediction score
            - trend: Filter by trend direction
        
    Returns:
        List of pool data dictionaries
    """
    try:
        # Set default filters if none provided
        if filters is None:
            filters = {}
        
        # Default limit to 100 if not specified
        if 'limit' not in filters:
            filters['limit'] = 100
            
        # Generate cache key from filters
        filter_str = "_".join([f"{k}:{v}" for k, v in sorted(filters.items())])
        pools_cache_key = f"pools_{filter_str}"
        
        if _is_cache_valid(pools_cache_key):
            # Return cached data
            return _cache[pools_cache_key]["data"]
        
        if not _can_make_api_call("pools"):
            # Rate limited, return cached data if available or empty list
            if pools_cache_key in _cache:
                return _cache[pools_cache_key]["data"]
            else:
                return []
        
        # Make API call
        url = f"{SOLPOOL_API_URL}/pools"
        
        # Use API key if available
        headers = {}
        if SOLPOOL_API_KEY:
            headers["X-API-Key"] = SOLPOOL_API_KEY
            
        response = requests.get(url, params=filters, headers=headers, timeout=10)
        
        # Update call timestamp
        _update_api_call_timestamp("pools")
        
        if response.status_code == 200:
            result = response.json()
            if result.get("status") == "success" and "data" in result:
                pool_data = result["data"]
                _save_to_cache(pools_cache_key, pool_data)
                return pool_data
        
        # Log error if API call was unsuccessful
        if response.status_code != 200:
            logger.error(f"API error: {response.status_code}, {response.text}")
        
        # Return empty list on error
        return []
    except Exception as e:
        logger.error(f"Error getting pools: {e}")
        # Always return a list, even on error
        return []

def get_pool_list(limit: int = 10) -> List[Dict[str, Any]]:
    """
    Legacy function to get list of all pools
    
    Args:
        limit: Maximum number of pools to return
        
    Returns:
        List of pool data dictionaries
    """
    # Call new function with limit parameter for backward compatibility
    return get_pools({"limit": limit})

def get_pool_detail(pool_id: str) -> Dict[str, Any]:
    """
    Get detailed data for a specific pool
    
    Args:
        pool_id: Pool ID to get details for
        
    Returns:
        Dictionary with pool details
    """
    try:
        # Generate cache key
        detail_cache_key = f"pool_detail_{pool_id}"
        
        if _is_cache_valid(detail_cache_key):
            # Return cached data
            return _cache[detail_cache_key]["data"]
        
        if not _can_make_api_call("pool_detail"):
            # Rate limited, return cached data if available or empty dict
            if detail_cache_key in _cache:
                return _cache[detail_cache_key]["data"]
            else:
                return {}
        
        # Make API call
        url = f"{SOLPOOL_API_URL}/pools/{pool_id}"
        
        # Use API key if available
        headers = {}
        if SOLPOOL_API_KEY:
            headers["X-API-Key"] = SOLPOOL_API_KEY
            
        response = requests.get(url, headers=headers, timeout=10)
        
        # Update call timestamp
        _update_api_call_timestamp("pool_detail")
        
        if response.status_code == 200:
            result = response.json()
            if result.get("status") == "success" and "data" in result:
                pool_data = result["data"]
                _save_to_cache(detail_cache_key, pool_data)
                return pool_data
        
        # Log error if API call was unsuccessful
        if response.status_code != 200:
            logger.error(f"API error getting pool detail: {response.status_code}, {response.text}")
        elif response.status_code == 200:
            # API returned 200 but response format was unexpected
            logger.error(f"Unexpected API response format: {response.text[:100]}...")
        
        # Return empty dict on error
        return {}
    except Exception as e:
        logger.error(f"Error getting pool detail: {e}")
        # Always return a dict, even on error
        return {}

def get_high_apr_pools(min_apr: float = 10.0, limit: int = 5) -> List[Dict[str, Any]]:
    """
    Get pools with high APR
    
    Args:
        min_apr: Minimum APR threshold
        limit: Maximum number of pools to return
        
    Returns:
        List of high APR pool data dictionaries
    """
    # Use new pools function with filters
    return get_pools({
        "min_apr": min_apr,
        "limit": limit,
        "sort_by": "apr",
        "sort_dir": "desc"
    })

def get_token_pools(token: str, limit: int = 5) -> List[Dict[str, Any]]:
    """
    Get pools containing a specific token
    
    Args:
        token: Token symbol to search for
        limit: Maximum number of pools to return
        
    Returns:
        List of pool data dictionaries containing the token
    """
    # Use new pools function with token filter
    return get_pools({
        "token": token,
        "limit": limit
    })

def get_predictions(min_score: float = 50.0, limit: int = 5) -> List[Dict[str, Any]]:
    """
    Get pools with AI predictions
    
    Args:
        min_score: Minimum prediction score threshold
        limit: Maximum number of predictions to return
        
    Returns:
        List of predicted pool data dictionaries
    """
    try:
        # Generate cache key
        predictions_cache_key = f"predictions_{min_score}_{limit}"
        
        if _is_cache_valid(predictions_cache_key):
            # Return cached data
            return _cache[predictions_cache_key]["data"]
        
        if not _can_make_api_call("predictions"):
            # Rate limited, return cached data if available or empty list
            if predictions_cache_key in _cache:
                return _cache[predictions_cache_key]["data"]
            else:
                return []
        
        # Make API call
        url = f"{SOLPOOL_API_URL}/predictions"
        params = {
            "min_score": min_score,
            "limit": limit
        }
        
        # Use API key if available
        headers = {}
        if SOLPOOL_API_KEY:
            headers["X-API-Key"] = SOLPOOL_API_KEY
            
        response = requests.get(url, params=params, headers=headers, timeout=10)
        
        # Update call timestamp
        _update_api_call_timestamp("predictions")
        
        if response.status_code == 200:
            result = response.json()
            if result.get("status") == "success" and "data" in result:
                prediction_data = result["data"]
                _save_to_cache(predictions_cache_key, prediction_data)
                return prediction_data
        
        # Log error if API call was unsuccessful
        if response.status_code != 200:
            logger.error(f"API error getting predictions: {response.status_code}, {response.text}")
        
        # Return empty list on error
        return []
    except Exception as e:
        logger.error(f"Error getting predictions: {e}")
        # Always return a list, even on error
        return []

def simulate_investment(
    pool_id: str,
    amount: float,
    days: int = 30
) -> Dict[str, Any]:
    """
    Simulate investment in a specific pool
    
    Args:
        pool_id: Pool ID to simulate investment in
        amount: Amount to invest (in USD)
        days: Number of days to simulate
        
    Returns:
        Dictionary with simulation results
    """
    try:
        # Generate cache key
        sim_cache_key = f"simulation_{pool_id}_{amount}_{days}"
        
        if _is_cache_valid(sim_cache_key):
            # Return cached data
            return _cache[sim_cache_key]["data"]
        
        if not _can_make_api_call("simulate"):
            # Rate limited, return cached data if available
            if sim_cache_key in _cache:
                return _cache[sim_cache_key]["data"]
            else:
                # Return error indicating we're rate limited
                logger.warning(f"Rate limited for simulation API: pool_id={pool_id}")
                return {
                    "success": False, 
                    "error": "Rate limited", 
                    "message": "Too many API calls, please try again later"
                }
        
        # Make API call
        url = f"{SOLPOOL_API_URL}/simulate"
        params = {
            "pool_id": pool_id,
            "amount": amount,
            "days": days
        }
        
        # Use API key if available
        headers = {}
        if SOLPOOL_API_KEY:
            headers["X-API-Key"] = SOLPOOL_API_KEY
            
        response = requests.get(url, params=params, headers=headers, timeout=10)
        
        # Update call timestamp
        _update_api_call_timestamp("simulate")
        
        if response.status_code == 200:
            result = response.json()
            if result.get("status") == "success" and "data" in result:
                simulation_data = result["data"]
                _save_to_cache(sim_cache_key, simulation_data)
                return simulation_data
        
        # Log error if API call was unsuccessful
        if response.status_code != 200:
            logger.error(f"API error in simulation: {response.status_code}, {response.text}")
        else:
            logger.error(f"Unexpected API response format for simulation: {response.text[:100]}...")
        
        # Try to get pool data to provide minimal info
        pool_data = get_pool_detail(pool_id)
        if pool_data:
            # Return minimal simulation based on current pool APR
            apr = pool_data.get("apr", 0) or 0
            daily_rate = apr / 365 / 100
            final_amount = amount * (1 + daily_rate) ** days
            profit = final_amount - amount
            
            minimal_simulation = {
                "success": True,
                "initial_amount": amount,
                "final_amount": final_amount,
                "profit": profit,
                "roi_percent": (profit / amount) * 100 if amount > 0 else 0,
                "apr_used": apr,
                "days": days,
                "pool_id": pool_id,
                "note": "Limited simulation based on current APR"
            }
            
            _save_to_cache(sim_cache_key, minimal_simulation)
            return minimal_simulation
        
        # Return error indication
        return {
            "success": False,
            "error": "Simulation failed",
            "message": "Unable to simulate investment at this time"
        }
    except Exception as e:
        logger.error(f"Error simulating investment: {e}")
        return {
            "success": False,
            "error": str(e),
            "message": "An error occurred while simulating the investment"
        }

def get_pool_history(pool_id: str, days: int = 30, interval: str = "day") -> List[Dict[str, Any]]:
    """
    Get historical data for a specific pool
    
    Args:
        pool_id: Pool ID to get history for
        days: Number of days of history to retrieve
        interval: Time interval ('hour', 'day', 'week')
        
    Returns:
        List of historical data points
    """
    try:
        # Generate cache key
        history_cache_key = f"pool_history_{pool_id}_{days}_{interval}"
        
        if _is_cache_valid(history_cache_key):
            # Return cached data
            return _cache[history_cache_key]["data"]
        
        if not _can_make_api_call("pool_history"):
            # Rate limited, return cached data if available or empty list
            if history_cache_key in _cache:
                return _cache[history_cache_key]["data"]
            else:
                return []
        
        # Make API call
        url = f"{SOLPOOL_API_URL}/pools/{pool_id}/history"
        params = {
            "days": days,
            "interval": interval
        }
        
        # Use API key if available
        headers = {}
        if SOLPOOL_API_KEY:
            headers["X-API-Key"] = SOLPOOL_API_KEY
            
        response = requests.get(url, params=params, headers=headers, timeout=15)
        
        # Update call timestamp
        _update_api_call_timestamp("pool_history")
        
        if response.status_code == 200:
            result = response.json()
            if result.get("status") == "success" and "data" in result:
                history_data = result["data"]
                _save_to_cache(history_cache_key, history_data)
                return history_data
        
        # Log error if API call was unsuccessful
        if response.status_code != 200:
            logger.error(f"API error getting pool history: {response.status_code}, {response.text}")
        elif response.status_code == 200:
            logger.error(f"Unexpected API response format for history: {response.text[:100]}...")
        
        # Return empty list on error
        return []
    except Exception as e:
        logger.error(f"Error getting pool history: {e}")
        # Always return a list, even on error
        return []

# Test the module
if __name__ == "__main__":
    print("Testing SolPool API Client")
    
    # Check API health
    print(f"API Health Check: {api_health_check()}")
    
    # Get pool list
    pools = get_pool_list(limit=3)
    print(f"\nPool List (3): {pools}")
    
    # Get high APR pools
    high_apr_pools = get_high_apr_pools(min_apr=15.0, limit=2)
    print(f"\nHigh APR Pools (2): {high_apr_pools}")
    
    # Get token pools
    if len(pools) > 0:
        token = pools[0].get("token1_symbol", "SOL")
        token_pools = get_token_pools(token, limit=2)
        print(f"\nToken Pools for {token} (2): {token_pools}")
        
    # Get pool details
    if len(pools) > 0:
        pool_id = pools[0].get("id")
        pool_detail = get_pool_detail(pool_id)
        print(f"\nPool Detail for {pool_id}: {pool_detail}")
        
        # Simulate investment
        simulation = simulate_investment(pool_id, 100.0, days=30)
        print(f"\nSimulation for {pool_id} ($100, 30 days): {simulation}")
        
        # Get history
        history = get_pool_history(pool_id, days=7, interval="day")
        print(f"\nHistory for {pool_id} (7 days, daily): {history[:2]}...")