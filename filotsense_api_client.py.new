#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
FilotSense API Client
Connects to FilotSense Public API for market sentiment and token analysis
"""

import os
import time
import json
import logging
import requests
from typing import Dict, List, Any, Optional, Union
from datetime import datetime, timedelta

# Configure logging
logging.basicConfig(
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# FilotSense API configuration
FILOTSENSE_API_URL = os.environ.get("FILOTSENSE_API_URL", "https://filotsense.replit.app/api")
FILOTSENSE_API_KEY = os.environ.get("FILOTSENSE_API_KEY")

# Cache configuration
CACHE_EXPIRY = 300  # 5 minutes cache for sentiment data
RATE_LIMIT_PERIOD = 120  # 2 minutes between API calls to avoid rate limiting

# Cache storage
_cache = {}
_last_call_timestamp = {}

def _is_cache_valid(cache_key: str) -> bool:
    """
    Check if cached data is still valid
    
    Args:
        cache_key: Cache key to check
        
    Returns:
        True if cache is valid, False otherwise
    """
    if cache_key not in _cache:
        return False
        
    cache_entry = _cache[cache_key]
    
    # Check if cache has expired
    if "timestamp" not in cache_entry:
        return False
        
    current_time = time.time()
    return current_time - cache_entry["timestamp"] < CACHE_EXPIRY

def _can_make_api_call(endpoint: str) -> bool:
    """
    Check if we can make an API call based on rate limiting
    
    Args:
        endpoint: API endpoint to check
        
    Returns:
        True if API call allowed, False otherwise
    """
    if endpoint not in _last_call_timestamp:
        return True
        
    current_time = time.time()
    return current_time - _last_call_timestamp[endpoint] >= RATE_LIMIT_PERIOD

def _save_to_cache(cache_key: str, data: Dict[str, Any]) -> None:
    """
    Save data to cache
    
    Args:
        cache_key: Cache key to use
        data: Data to cache
    """
    _cache[cache_key] = {
        "data": data,
        "timestamp": time.time()
    }

def _update_api_call_timestamp(endpoint: str) -> None:
    """
    Update timestamp of last API call
    
    Args:
        endpoint: API endpoint that was called
    """
    _last_call_timestamp[endpoint] = time.time()

def api_health_check() -> bool:
    """
    Check if the FilotSense API is accessible
    
    Returns:
        True if API is accessible, False otherwise
    """
    try:
        # Try to get the API health endpoint
        health_cache_key = "health_check"
        
        if _is_cache_valid(health_cache_key):
            # Return cached health status
            return _cache[health_cache_key]["data"].get("status") == "success"
        
        if not _can_make_api_call("health"):
            # Rate limited, assume API is healthy if we've successfully connected before
            return health_cache_key in _cache and _cache[health_cache_key]["data"].get("status") == "success"
            
        # Make API call
        url = f"{FILOTSENSE_API_URL}/health"
        
        # Use API key if available
        headers = {}
        if FILOTSENSE_API_KEY:
            headers["X-API-Key"] = FILOTSENSE_API_KEY
            
        response = requests.get(url, headers=headers, timeout=5)
        
        # Update call timestamp
        _update_api_call_timestamp("health")
        
        if response.status_code == 200:
            result = response.json()
            _save_to_cache(health_cache_key, result)
            return result.get("status") == "success"
            
        return False
    except Exception as e:
        logger.error(f"Error checking API health: {e}")
        return False

def get_sentiment_simple() -> Dict[str, Any]:
    """
    Get simple sentiment data for all supported cryptocurrencies
    
    Returns:
        Dictionary with sentiment data for all tokens
    """
    try:
        # Generate cache key
        sentiment_cache_key = "sentiment_simple"
        
        if _is_cache_valid(sentiment_cache_key):
            # Return cached data
            return _cache[sentiment_cache_key]["data"]
        
        if not _can_make_api_call("sentiment_simple"):
            # Rate limited, return cached data if available
            if sentiment_cache_key in _cache:
                return _cache[sentiment_cache_key]["data"]
            else:
                logger.warning("Rate limited for sentiment API")
                return {
                    "success": False,
                    "error": "Rate limited",
                    "message": "Too many API calls, please try again later"
                }
        
        # Make API call
        url = f"{FILOTSENSE_API_URL}/sentiment/simple"
        
        # Use API key if available
        headers = {}
        if FILOTSENSE_API_KEY:
            headers["X-API-Key"] = FILOTSENSE_API_KEY
            
        response = requests.get(url, headers=headers, timeout=10)
        
        # Update call timestamp
        _update_api_call_timestamp("sentiment_simple")
        
        if response.status_code == 200:
            result = response.json()
            if result.get("status") == "success" and "sentiment" in result:
                _save_to_cache(sentiment_cache_key, result)
                return result
                
        # Log error if API call was unsuccessful
        if response.status_code != 200:
            logger.error(f"API error getting sentiment: {response.status_code}, {response.text}")
        elif response.status_code == 200:
            logger.error(f"Unexpected API response format: {response.text[:100]}...")
            
        # Return error indication
        return {
            "success": False,
            "error": "Failed to get sentiment data",
            "message": "Unable to retrieve sentiment data at this time"
        }
        
    except Exception as e:
        logger.error(f"Error getting sentiment data: {e}")
        return {
            "success": False,
            "error": str(e),
            "message": "An error occurred while fetching sentiment data"
        }

def get_token_sentiment(token: Optional[str] = None) -> Dict[str, Any]:
    """
    Get sentiment data for a specific token or overall market (legacy function)
    
    Args:
        token: Optional token symbol to get sentiment for, if None returns overall market sentiment
        
    Returns:
        Dictionary with sentiment data
    """
    # Get all sentiment data
    all_sentiment = get_sentiment_simple()
    
    # If there was an error or no sentiment data is available
    if not all_sentiment.get("success", False) or "sentiment" not in all_sentiment:
        return {
            "success": False,
            "error": "Failed to get sentiment data",
            "message": all_sentiment.get("message", "Unable to retrieve sentiment data")
        }
    
    # For overall market sentiment (when token is None)
    if token is None:
        # Calculate average sentiment across all tokens
        sentiment_values = [data.get("score", 0) for _, data in all_sentiment["sentiment"].items()]
        if sentiment_values:
            avg_sentiment = sum(sentiment_values) / len(sentiment_values)
        else:
            avg_sentiment = 0
            
        return {
            "success": True,
            "score": avg_sentiment,
            "tokens_analyzed": len(sentiment_values),
            "timestamp": all_sentiment.get("timestamp")
        }
    
    # For specific token sentiment
    token = token.upper()  # Convert to uppercase for consistency
    if token in all_sentiment["sentiment"]:
        token_data = all_sentiment["sentiment"][token]
        token_data["success"] = True
        return token_data
    else:
        # Token not found
        return {
            "success": False,
            "error": "Token not found",
            "message": f"No sentiment data available for {token}"
        }

def get_prices_latest() -> Dict[str, Any]:
    """
    Get latest price data for all supported cryptocurrencies
    
    Returns:
        Dictionary with price data for all tokens
    """
    try:
        # Generate cache key
        prices_cache_key = "prices_latest"
        
        if _is_cache_valid(prices_cache_key):
            # Return cached data
            return _cache[prices_cache_key]["data"]
        
        if not _can_make_api_call("prices_latest"):
            # Rate limited, return cached data if available
            if prices_cache_key in _cache:
                return _cache[prices_cache_key]["data"]
            else:
                logger.warning("Rate limited for prices API")
                return {
                    "success": False,
                    "error": "Rate limited",
                    "message": "Too many API calls, please try again later"
                }
        
        # Make API call
        url = f"{FILOTSENSE_API_URL}/prices/latest"
        
        # Use API key if available
        headers = {}
        if FILOTSENSE_API_KEY:
            headers["X-API-Key"] = FILOTSENSE_API_KEY
            
        response = requests.get(url, headers=headers, timeout=10)
        
        # Update call timestamp
        _update_api_call_timestamp("prices_latest")
        
        if response.status_code == 200:
            result = response.json()
            if result.get("status") == "success" and "prices" in result:
                _save_to_cache(prices_cache_key, result)
                return result
                
        # Log error if API call was unsuccessful
        if response.status_code != 200:
            logger.error(f"API error getting price data: {response.status_code}, {response.text}")
        elif response.status_code == 200:
            logger.error(f"Unexpected API response format: {response.text[:100]}...")
            
        # Return error indication
        return {
            "success": False,
            "error": "Failed to get price data",
            "message": "Unable to retrieve price data at this time"
        }
        
    except Exception as e:
        logger.error(f"Error getting price data: {e}")
        return {
            "success": False,
            "error": str(e),
            "message": "An error occurred while fetching price data"
        }

def get_token_price(token: str) -> Dict[str, Any]:
    """
    Get price data for a specific token (legacy function)
    
    Args:
        token: Token symbol to get price for
        
    Returns:
        Dictionary with price data
    """
    # Get all price data
    all_prices = get_prices_latest()
    
    # If there was an error or no price data is available
    if not all_prices.get("success", False) or "prices" not in all_prices:
        return {
            "success": False,
            "error": "Failed to get price data",
            "message": all_prices.get("message", "Unable to retrieve price data")
        }
    
    # For specific token price
    token = token.upper()  # Convert to uppercase for consistency
    if token in all_prices["prices"]:
        price_data = all_prices["prices"][token]
        price_data["success"] = True
        return price_data
    else:
        # Token not found
        return {
            "success": False,
            "error": "Token not found",
            "message": f"No price data available for {token}"
        }

def get_market_sentiment() -> Dict[str, Any]:
    """
    Get overall market sentiment (convenience function)
    
    Returns:
        Dictionary with market sentiment data
    """
    return get_token_sentiment(None)

# Test the module
if __name__ == "__main__":
    print("Testing FilotSense API Client")
    
    # Check API health
    print(f"API Health Check: {api_health_check()}")
    
    # Get sentiment data
    sentiment = get_sentiment_simple()
    print(f"\nSentiment Data: {sentiment}")
    
    # Get price data
    prices = get_prices_latest()
    print(f"\nPrice Data: {prices}")
    
    # Get token sentiment
    token_sentiment = get_token_sentiment("SOL")
    print(f"\nSOL Sentiment: {token_sentiment}")
    
    # Get token price
    token_price = get_token_price("SOL")
    print(f"\nSOL Price: {token_price}")
    
    # Get market sentiment
    market_sentiment = get_market_sentiment()
    print(f"\nMarket Sentiment: {market_sentiment}")